services:
  # Serviço da aplicação SIGAC
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sigac-app
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
      # Volumes otimizados para evitar sync de arquivos desnecessários
      - app_vendor:/var/www/vendor
      - app_node_modules:/var/www/node_modules
    networks:
      - sigac-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  # Servidor web Nginx
  nginx:
    image: nginx:alpine
    container_name: sigac-nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      # Cache otimizado
      - nginx_cache:/var/cache/nginx
    networks:
      - sigac-network
    depends_on:
      - app

  # Banco de dados MySQL
  db:
    image: mysql
    container_name: sigac-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - dbdata:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    ports:
      - "3307:3306"
    networks:
      - sigac-network
    healthcheck:
      test: ["CMD", "mysql", "-u", "root", "-p${DB_PASSWORD}", "-e", "SELECT 1"]
      timeout: 20s
      retries: 10

  # Redis para cache e sessões
  redis:
    image: redis:alpine
    container_name: sigac-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    networks:
      - sigac-network

  # Node.js para compilar assets (React/TypeScript) - OTIMIZADO
  node:
    image: node:22-alpine
    container_name: sigac-node
    working_dir: /var/www
    volumes:
      - ./:/var/www
      # Volume otimizado para node_modules
      - app_node_modules:/var/www/node_modules
    command: sh -c "npm install --prefer-offline --no-audit --progress=false && npm run dev"
    ports:
      - "5173:5173"
    networks:
      - sigac-network
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=1000
    # Limites de recursos para evitar uso excessivo
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # MailHog para testes de email
  mailhog:
    image: mailhog/mailhog
    container_name: sigac-mailhog
    restart: unless-stopped
    ports:
      - "8025:8025"  # Interface web
      - "1025:1025"  # SMTP server
    networks:
      - sigac-network

# Volumes persistentes OTIMIZADOS
volumes:
  dbdata:
    driver: local
  app_vendor:
    driver: local
  app_node_modules:
    driver: local
  nginx_cache:
    driver: local

# Rede interna para comunicação entre containers
networks:
  sigac-network:
    driver: bridge 